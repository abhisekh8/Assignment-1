//Write a Java program demonstrating interfaces, method overriding, and method
overloading. Define a Vehicle interface with abstract methods accelerate() and
brake(). Implement Car and Bicycle classes that override these methods with specific
messages for acceleration and braking. Introduce method overloading in both classes
by defining multiple accelerate() methods with different parameters (e.g., speed,
duration). In the VehicleApp class, instantiate Car and Bicycle objects, test
overridden methods, and invoke overloaded accelerate() methods to showcase
polymorphism.




interface Vehicle {
    void accelerate();  
    void brake();       
}


class Car implements Vehicle {
    @Override
    public void accelerate() {
        System.out.println("Car is accelerating.");
    }

    // Overloaded accelerate method with speed parameter
    public void accelerate(int speed) {
        System.out.println("Car is accelerating to " + speed + " km/h.");
    }

    // Overloaded accelerate method with speed and duration parameters
    public void accelerate(int speed, int duration) {
        System.out.println("Car is accelerating to " + speed + " km/h for " + duration + " minutes.");
    }

    @Override
    public void brake() {
        System.out.println("Car is braking.");
    }
}


class Bicycle implements Vehicle {
    @Override
    public void accelerate() {
        System.out.println("Bicycle is accelerating.");
    }

    // Overloaded accelerate method with speed parameter
    public void accelerate(int speed) {
        System.out.println("Bicycle is accelerating to " + speed + " km/h.");
    }

    // Overloaded accelerate method with speed and duration parameters
    public void accelerate(int speed, int duration) {
        System.out.println("Bicycle is accelerating to " + speed + " km/h for " + duration + " minutes.");
    }

    @Override
    public void brake() {
        System.out.println("Bicycle is braking.");
    }
}


public class VehicleApp {
    public static void main(String[] args) {
      
        Vehicle car = new Car();
        Vehicle bicycle = new Bicycle();

       
        car.accelerate();           
        car.brake();                

        bicycle.accelerate();      
        bicycle.brake();           

        // Testing overloaded methods for Car
        ((Car) car).accelerate(60);         
        ((Car) car).accelerate(60, 10);     

        // Testing overloaded methods for Bicycle
        ((Bicycle) bicycle).accelerate(20);  
        ((Bicycle) bicycle).accelerate(20, 5); 
    }
}
